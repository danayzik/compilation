/*************/
/* IMPORT(S) */
/*************/
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;
import AST.*;

parser code 
{:

	public Lexer lexer;
	public List<FUNC_ARG>funcArgListBuilder;
	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getTokenStartPosition());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getTokenStartPosition());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal LT;
terminal GT;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal COMMA;
terminal ARRAY;
terminal CLASS;
terminal NIL;
terminal NEW;
terminal EXTENDS;
terminal RETURN;
terminal ERROR;


/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_CFIELD cField;
non terminal AST_NEW_EXP newExp;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal List<FUNC_ARG> funcArgList;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_EXP_LIST expList;
non terminal AST_DEC_LIST decList;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: stmtList */
/************************/
start with decList;

/********************/
/* DERIVATION RULES */
/********************/

decList	::=		    dec:d	decList:l		{: RESULT = new AST_DEC_LIST(d,l);    :}
					| dec:d				{: RESULT = new AST_DEC_LIST(d,null); :}
					;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

cFieldList	::=		cField:f	cFieldList:l		{: RESULT = new AST_CFIELD_LIST(f,l);    :}
					| cField:f				{: RESULT = new AST_CFIELD_LIST(f,null); :}
					;

expList	::=		    exp:e COMMA expList:l		{: RESULT = new AST_EXP_LIST(e,l);    :}
					| COMMA exp:e				{: RESULT = new AST_EXP_LIST(e,null); :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		  type:t ID:id ASSIGN newExp:e SEMICOLON				    {: RESULT = new AST_LOCAL_VAR_DEC(t, id, e); :}
                    | type:t ID:id SEMICOLON	                                {: RESULT = new AST_LOCAL_VAR_DEC(t, id); :}
                    | type:t ID:id ASSIGN exp:e SEMICOLON	                    {: RESULT = new AST_LOCAL_VAR_DEC(t, id, e); :}
                    | var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
                    | var:v ASSIGN newExp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
                    | RETURN SEMICOLON                                      {: RESULT = new AST_STMT_RETURN(null); :}
                    | RETURN exp:e SEMICOLON                                      {: RESULT = new AST_STMT_RETURN(e); :}
					| IF LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| ID:funcID LPAREN RPAREN           {: RESULT = new AST_STMT_FUNC_CALL(funcID, null);:}
					| ID:funcID LPAREN expList:argList RPAREN           {: RESULT = new AST_STMT_FUNC_CALL(funcID, argList);:}
					| var:v DOT ID:funcID LPAREN RPAREN           {: RESULT = new AST_STMT_FUNC_CALL(v, funcID, null);:}
                    | ID:funcID LPAREN exp:e RPAREN           {: RESULT = new AST_STMT_FUNC_CALL(funcID, new AST_EXP_LIST(e,null));:}
					| var:v DOT ID:funcID LPAREN exp:e RPAREN   {: RESULT = new AST_STMT_FUNC_CALL(v, funcID, new AST_EXP_LIST(e,null));:}
                    | var:v DOT ID:funcID LPAREN expList:argList RPAREN   {: RESULT = new AST_STMT_FUNC_CALL(v, funcID, argList);:}
					;

exp			::=		INT:i						        {: RESULT = new AST_EXP_INT(i); :}
                    | MINUS INT:i						{: RESULT = new AST_EXP_INT(-i); :}
					| var:v								{: RESULT = new AST_EXP_VAR(v); :}
					| LPAREN exp:e1 RPAREN				{: RESULT = new AST_EXP_PAREN(e1); :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					| exp:e1 TIMES  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 2);:}
					| exp:e1 DIVIDE  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 3);:}
					| exp:e1 LT  exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 4);:}
					| exp:e1 GT  exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 5);:}
					| exp:e1 EQ  exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 6);:}
					| STRING:s1				            {: RESULT = new AST_EXP_STRING(s1);:}
					| NIL			                    {: RESULT = new AST_EXP_NIL();:}
					| ID:funcID LPAREN RPAREN           {: RESULT = new AST_EXP_FUNC_CALL(funcID, null);:}
					| ID:funcID LPAREN expList:argList RPAREN           {: RESULT = new AST_EXP_FUNC_CALL(funcID, argList);:}
					| var:v DOT ID:funcID LPAREN RPAREN           {: RESULT = new AST_EXP_FUNC_CALL(v, funcID, null);:}
                    | ID:funcID LPAREN exp:e RPAREN           {: RESULT = new AST_EXP_FUNC_CALL(funcID, new AST_EXP_LIST(e,null));:}
					| var:v DOT ID:funcID LPAREN exp:e RPAREN   {: RESULT = new AST_EXP_FUNC_CALL(v, funcID, new AST_EXP_LIST(e,null));:}
                    | var:v DOT ID:funcID LPAREN expList:argList RPAREN   {: RESULT = new AST_EXP_FUNC_CALL(v, funcID, argList);:}
					;

dec		  ::=		  type:t ID:id ASSIGN newExp:e SEMICOLON				    {: RESULT = new AST_GLOBAL_VAR_DEC(t, id, e); :}
                    | type:t ID:id SEMICOLON	                                {: RESULT = new AST_GLOBAL_VAR_DEC(t, id); :}
                    | type:t ID:id ASSIGN exp:e SEMICOLON	                    {: RESULT = new AST_GLOBAL_VAR_DEC(t, id, e); :}
					| ARRAY ID:id EQ type:t LBRACK RBRACK SEMICOLON	            {: RESULT = new AST_DEC_ARRAY_TYPE_DEF(id, t); :}
					| type:funcType ID:funcName LPAREN RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_GLOBAL_FUNC_DEC(funcType, funcName, body, null); :}
                    | type:funcType ID:funcName LPAREN type:argType ID:argID RPAREN LBRACE stmtList:body RBRACE  {: RESULT = new AST_GLOBAL_FUNC_DEC(funcType, funcName, body, new ArrayList<>(List.of(new FUNC_ARG(argType, argID)))); :}
                    | type:funcType ID:funcName LPAREN type:argType ID:argID funcArgList:fArgLst RPAREN LBRACE stmtList:body RBRACE  {: fArgLst.add(new FUNC_ARG(argType, argID));RESULT = new AST_GLOBAL_FUNC_DEC(funcType, funcName, body, new ArrayList<>(fArgLst)); :}
					| CLASS ID:id LBRACE cFieldList:flist RBRACE {: RESULT = new AST_CLASS_DEC(id, flist, null); :}
					| CLASS ID:id EXTENDS ID:parentID LBRACE cFieldList:flist RBRACE  {: RESULT = new AST_CLASS_DEC(id, flist, parentID); :}
					;

type	::=		    TYPE_INT								{: RESULT = new AST_TYPE("int"); :}
					| TYPE_STRING 	                        {: RESULT = new AST_TYPE("string"); :}
					| TYPE_VOID	                            {: RESULT = new AST_TYPE("void"); :}
					| ID:s	                                {: RESULT = new AST_TYPE(s); :}
					;

newExp	::=		    NEW type:t1								{: RESULT = new AST_NEW_EXP_SIMPLE(t1); :}
					| NEW type:t LBRACK exp:e RBRACK 	    {: RESULT = new AST_NEW_EXP_ARRAY(t, e); :}
					;

cField	::=		      type:t ID:id ASSIGN newExp:e SEMICOLON				    {: RESULT = new AST_CLASS_VAR_DEC(t, id, e); :}
                    | type:t ID:id SEMICOLON	                                {: RESULT = new AST_CLASS_VAR_DEC(t, id); :}
                    | type:t ID:id ASSIGN exp:e SEMICOLON	                    {: RESULT = new AST_CLASS_VAR_DEC(t, id, e); :}
					| type:funcType ID:funcName LPAREN RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_CLASS_FUNC_DEC(funcType, funcName, body, null); :}
                    | type:funcType ID:funcName LPAREN type:argType ID:argID RPAREN LBRACE stmtList:body RBRACE  {: RESULT = new AST_CLASS_FUNC_DEC(funcType, funcName, body, new ArrayList<>(List.of(new FUNC_ARG(argType, argID)))); :}
                    | type:funcType ID:funcName LPAREN type:argType ID:argID funcArgList:fArgLst RPAREN LBRACE stmtList:body RBRACE  {: fArgLst.add(new FUNC_ARG(argType, argID));RESULT = new AST_CLASS_FUNC_DEC(funcType, funcName, body, new ArrayList<>(fArgLst)); :}
					;


funcArgList	 ::=	COMMA type:argType ID:argID funcArgList:fArgLst				{: fArgLst.add(new FUNC_ARG(argType, argID)); :}
                    | COMMA type:argType ID:argID                                {: funcArgListBuilder = new ArrayList<>(List.of(new FUNC_ARG(argType, argID))); :}
					;

